{"/":{"title":"Introduction to Treblle ðŸš€","data":{"introduction#Introduction":"Thank you for choosing Treblle Express for monitoring API best practices and inspecting request and response bodies in your Express.js application. This documentation will guide you through the process of integrating Treblle Express into your project.","requirements#Requirements":"Node.js and npm installed on your machine.\nAn existing Express.js application.","installation#Installation":"Install Treblle Express using pnpm:\npnpm install treblle-express","integration-steps#Integration Steps":"","1-import-dependencies#1. Import Dependencies":"Ensure you have the required dependencies installed:\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport cookieParser from 'cookie-parser';\r\nimport cors from 'cors';\r\nimport { TreblleExpress } from 'treblle-express';","2-create-express-app#2. Create Express App":"Initialize your Express application:\nconst app = express();","3-configure-middleware#3. Configure Middleware":"Set up necessary middleware for your Express app:\napp.use(cors());\r\napp.options('*', cors());\r\napp.use(express.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(cookieParser());","4-using-express-router#4. Using Express Router":"Include your application routes. Adjust the path accordingly:\nimport express from 'express';\r\nconst router = express.Router();\r\n\r\nconst Treblle = new TreblleExpress(router, {\r\n  apiKey: process.env.TREBLLE_API_KEY,\r\n  projectId: process.env.TREBLLE_PROJECT_ID,\r\n})\r\n  .config({\r\n    environment: 'development', // Possible values: \"production\", \"development\", \"testing\"\r\n    // debugEndpoints: ['https://webhook.site/your-webhook-id'],\r\n    maskValues: ['email', 'name'],\r\n    logError: true,\r\n  })\r\n  .listen();","5-using-express-app#5. Using Express app":"","51-create-a-env-file-add-the-following#5.1 Create a .env file add the following:":"The TREBLLE_API_KEY and TREBLLE_PROJECT_ID are required and an error will be thrown if unspecified\nTREBLLE_API_KEY=\r\nTREBLLE_PROJECT_ID=\nCreate an instance of TreblleExpress, passing your Express app object and configuration options:\nimport express from 'express';\r\nconst app = express();\r\n\r\nconst Treblle = new TreblleExpress(app, {\r\n  apiKey: process.env.TREBLLE_API_KEY,\r\n  projectId: process.env.TREBLLE_PROJECT_ID,\r\n})\r\n  .config({\r\n    environment: 'development', // Possible values: \"production\", \"development\", \"testing\"\r\n    // debugEndpoints: ['https://webhook.site/your-webhook-id'],\r\n    maskValues: ['email', 'name'],\r\n    logError: true,\r\n  })\r\n  .listen();\nNote: All values in the configuration are optional, and default values will be used if not provided.\nenvironment: The environment in which your application is running (\"production\", \"development\", \"testing\"). Default is \"testing,\" where Treblle Express won't log requests to the production Treblle API.\ndebugEndpoints: An array of endpoints to inspect the payloads sent by Treblle Express. Useful for debugging.\nmaskValues: An array of sensitive values (e.g., passwords, emails) to be masked in logs.\nlogError: Set to true to log errors.\nNote: The listen method must be called to start monitoring. Ensure that you include this method in your integration as shown in the example:Note: Calling the listen, config methods multiple times will not affect the logging.","6-error-handling#6. Error Handling":"Treblle Express provides a built-in async error handler that you can use to capture errors in your Express application. This handler is especially useful for capturing unhandled exceptions and logging relevant information. Here's how you can integrate it into your project:","61-add-the-error-handler-middleware#6.1. Add the Error Handler Middleware":"Insert the error handler middleware into your Express application, typically after other middleware and route definitions:\n// Add other middleware and route definitions here\r\n\r\n// Use the Treblle Express error handler\r\napp.get(\r\n  '/',\r\n  Trebble.errorHandler(async (req: Request, res: Response) => {\r\n    // route handling here\r\n    res.send({ status: 'This is the base endpoint', password: 'sammy' });\r\n  }),\r\n);\nThe errorHandler function takes a async fn(req, res, next) => {} as a parameter, which should handle errors and return a closure which executes your request handler.The error handler logs relevant information, including the source file, error type, message, file, and line number on the Treblle dashboard. This information is valuable for debugging and troubleshooting.Now, your Express application is equipped with a robust error handling mechanism provided by Treblle Express.For more details and advanced configurations, refer to the Treblle Express documentation.","7-known-issues#7. Known Issues":"While using Treblle Express, be aware of the following known issues:\nIssue 1: Multiple instances of TreblleExpress is not recommended, as requests will most likely not be captured. Declare the TreblleExpress instance at the top most level of your express server.","support#Support":"If you encounter any issues or have questions, feel free to reach out to our support team. We're here to help!Happy coding! ðŸš€"}}}